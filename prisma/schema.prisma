// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  
  id            String    @id @default(cuid()) 
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified") 
  image         String?

  hashedPassword String?


  meals           Meal[]
  nutritionalTargets NutritionalTarget[]

  accounts      Account[]
  sessions      Session[]

  // Seus campos de data (mantidos)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@map("users") // Opcional, para nomear a tabela no DB como "users".
}

// ## Account Model ##
// Obrigatório. Armazena as informações dos provedores OAuth (Google, GitHub, etc.).
// Ele vincula uma conta externa (ex: a conta do Google do usuário) ao seu modelo `User`.
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// ## Session Model ##
// Obrigatório. Armazena as sessões ativas dos usuários quando se usa um adapter de banco de dados.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// ## VerificationToken Model ##
// Obrigatório. Usado para fluxos de "magic link" (login sem senha por email).
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Meal {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  mealFoods MealFood[]
}

model Food {
  id            String  @id @default(cuid())
  name          String  @unique
  kcal          Float
  protein       Float
  carbohydrates Float
  lipids        Float
  baseQuantity  Float

  mealFoods     MealFood[]
}

model MealFood {
  id            String  @id @default(cuid())

  quantity      Float

  calculatedKcal          Float
  calculatedProtein       Float
  calculatedCarbohydrates Float
  calculatedLipids        Float

  meal   Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId String

  food   Food   @relation(fields: [foodId], references: [id])
  foodId String
}

model NutritionalTarget {
  id            String   @id @default(cuid())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  kcal          Float
  carbohydrates Float
  protein       Float
  lipids        Float

  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}